// This file was automatically generated.  Do not modify.

'use strict';

goog.provide('Blockly.Msg.zh-hants');

goog.require('Blockly.Msg');

Blockly.Msg.ADD_COMMENT = "添加注解";
Blockly.Msg.AUTH = "Please authorize this app to enable your work to be saved and to allow it to be shared by you.";
Blockly.Msg.CHANGE_VALUE_TITLE = "更改值:";
Blockly.Msg.CHAT = "Chat with your collaborator by typing in this box!";
Blockly.Msg.COLLAPSE_ALL = "折叠所有积木";
Blockly.Msg.COLLAPSE_BLOCK = "折叠积木";
Blockly.Msg.COLOUR_BLEND_COLOUR1 = "colour 1";
Blockly.Msg.COLOUR_BLEND_COLOUR2 = "colour 2";
Blockly.Msg.COLOUR_BLEND_HELPURL = "http://meyerweb.com/eric/tools/color-blend/";
Blockly.Msg.COLOUR_BLEND_RATIO = "ratio";
Blockly.Msg.COLOUR_BLEND_TITLE = "blend";
Blockly.Msg.COLOUR_BLEND_TOOLTIP = "Blends two colours together with a given ratio (0.0 - 1.0).";
Blockly.Msg.COLOUR_PICKER_HELPURL = "https://en.wikipedia.org/wiki/Color";
Blockly.Msg.COLOUR_PICKER_TOOLTIP = "Choose a colour from the palette.";
Blockly.Msg.COLOUR_RANDOM_HELPURL = "http://randomcolour.com";
Blockly.Msg.COLOUR_RANDOM_TITLE = "random colour";
Blockly.Msg.COLOUR_RANDOM_TOOLTIP = "Choose a colour at random.";
Blockly.Msg.COLOUR_RGB_BLUE = "blue";
Blockly.Msg.COLOUR_RGB_GREEN = "green";
Blockly.Msg.COLOUR_RGB_HELPURL = "http://www.december.com/html/spec/colorper.html";
Blockly.Msg.COLOUR_RGB_RED = "red";
Blockly.Msg.COLOUR_RGB_TITLE = "colour with";
Blockly.Msg.COLOUR_RGB_TOOLTIP = "Create a colour with the specified amount of red, green, and blue.  All values must be between 0 and 100.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_HELPURL = "https://code.google.com/p/blockly/wiki/Loops#Loop_Termination_Blocks";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "马上跳出 循环";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "继续下一次 循环";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "马上跳出目前运行的循环.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "跳过之后的程序叙述, 马上继续运行下一次循环.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_WARNING = "警告: 这个积木只能使用在循环的程序区块.";
Blockly.Msg.CONTROLS_FOREACH_HELPURL = "https://code.google.com/p/blockly/wiki/Loops#for_each for each block";
Blockly.Msg.CONTROLS_FOREACH_INPUT_INLIST = "in list";
Blockly.Msg.CONTROLS_FOREACH_INPUT_INLIST_TAIL = "";
Blockly.Msg.CONTROLS_FOREACH_INPUT_ITEM = "for each item";
Blockly.Msg.CONTROLS_FOREACH_TOOLTIP = "For each item in a list, set the variable '%1' to the item, and then do some statements.";
Blockly.Msg.CONTROLS_FOR_HELPURL = "https://code.google.com/p/blockly/wiki/Loops#count_with";
Blockly.Msg.CONTROLS_FOR_INPUT_FROM_TO_BY = "从 %1 到 %2 增量 %3";
Blockly.Msg.CONTROLS_FOR_INPUT_WITH = "计数循环for";
Blockly.Msg.CONTROLS_FOR_INPUT_ORDER = "递增计数循环";
Blockly.Msg.CONTROLS_FOR_TOOLTIP = "使用计数器变量 %1 从一个开始值至结束值, 每一次增加一个值来重复运行程序区块.";
Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP = "在if条件区块的积木1添加条件.";
Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP = "添加最后的否则else条件, 这是if条件的其他条件程序区块.";
Blockly.Msg.CONTROLS_IF_HELPURL = "https://code.google.com/p/blockly/wiki/If_Then";
Blockly.Msg.CONTROLS_IF_IF_TOOLTIP = "添加, 删除, 或重排区段来重新规划这个if条件积木.";
Blockly.Msg.CONTROLS_IF_MSG_ELSE = "否则else";
Blockly.Msg.CONTROLS_IF_MSG_ELSEIF = "否则如果else/if";
Blockly.Msg.CONTROLS_IF_MSG_IF = "如果if";
Blockly.Msg.CONTROLS_IF_TOOLTIP_1 = "如果条件值为True, 就运行程序区块的代码.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_2 = "如果条件值是True, 就运行第1个程序区块. 否则运行第2个程序区块的代码.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_3 = "如果第1个条件值为True, 就运行第1个程序区块. 否则如果第2个条件值为True, 就运行第2个程序区块的代码.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_4 = "如果第1个条件值为True, 就运行第1个程序区块. 否则如果第2个条件值为True, 就运行第2个程序区块的代码. 如果都为False, 运行最后1个程序区块的代码.";
Blockly.Msg.CONTROLS_REPEAT_HELPURL = "https://en.wikipedia.org/wiki/For_loop";
Blockly.Msg.CONTROLS_REPEAT_INPUT_DO = "运行";
Blockly.Msg.CONTROLS_REPEAT_TITLE = "重复 %1 次";
Blockly.Msg.CONTROLS_REPEAT_TITLE_REPEAT = "条件循环";
Blockly.Msg.CONTROLS_REPEAT_TITLE_TIMES = "次";
Blockly.Msg.CONTROLS_REPEAT_TOOLTIP = "重复运行一些程序叙述很多次.";
Blockly.Msg.CONTROLS_WHILEUNTIL_HELPURL = "https://code.google.com/p/blockly/wiki/Loops#repeat";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "条件循环 直到until";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "条件循环 当while";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "当条件为False, 就重复运行一些程序叙述.";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "当条件为True, 就重复运行一些程序叙述.";
Blockly.Msg.DELETE_BLOCK = "删除积木";
Blockly.Msg.DELETE_X_BLOCKS = "删除 %1 积木";
Blockly.Msg.DISABLE_BLOCK = "停用积木";
Blockly.Msg.DUPLICATE_BLOCK = "复制";
Blockly.Msg.ENABLE_BLOCK = "启用积木";
Blockly.Msg.EXPAND_ALL = "展开多个积木";
Blockly.Msg.EXPAND_BLOCK = "展开积木";
Blockly.Msg.EXTERNAL_INPUTS = "外部输入";
Blockly.Msg.HELP = "帮助";
Blockly.Msg.INLINE_INPUTS = "同行输入";
Blockly.Msg.LISTS_CREATE_EMPTY_HELPURL = "https://en.wikipedia.org/wiki/Linked_list#Empty_lists";
Blockly.Msg.LISTS_CREATE_EMPTY_TITLE = "创建空清单";
Blockly.Msg.LISTS_CREATE_EMPTY_TOOLTIP = "Returns a list, of length 0, containing no data records";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = "list";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = "Add, remove, or reorder sections to reconfigure this list block.";
Blockly.Msg.LISTS_CREATE_WITH_INPUT_WITH = "create list with";
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TOOLTIP = "Add an item to the list.";
Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP = "Create a list with any number of items.";
Blockly.Msg.LISTS_GET_INDEX_FIRST = "first";
Blockly.Msg.LISTS_GET_INDEX_FROM_END = "# from end";
Blockly.Msg.LISTS_GET_INDEX_FROM_START = "#";
Blockly.Msg.LISTS_GET_INDEX_GET = "get";
Blockly.Msg.LISTS_GET_INDEX_GET_REMOVE = "get and remove";
Blockly.Msg.LISTS_GET_INDEX_LAST = "last";
Blockly.Msg.LISTS_GET_INDEX_RANDOM = "random";
Blockly.Msg.LISTS_GET_INDEX_REMOVE = "remove";
Blockly.Msg.LISTS_GET_INDEX_TAIL = "";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = "Returns the first item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_END = "Returns the item at the specified position in a list.  #1 is the last item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_START = "Returns the item at the specified position in a list.  #1 is the first item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_LAST = "Returns the last item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "Returns a random item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = "Removes and returns the first item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_END = "Removes and returns the item at the specified position in a list.  #1 is the last item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_START = "Removes and returns the item at the specified position in a list.  #1 is the first item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = "Removes and returns the last item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "Removes and returns a random item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = "Removes the first item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_END = "Removes the item at the specified position in a list.  #1 is the last item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_START = "Removes the item at the specified position in a list.  #1 is the first item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = "Removes the last item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = "Removes a random item in a list.";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_END = "to # from end";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_START = "to #";
Blockly.Msg.LISTS_GET_SUBLIST_END_LAST = "to last";
Blockly.Msg.LISTS_GET_SUBLIST_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#Getting_a_sublist";
Blockly.Msg.LISTS_GET_SUBLIST_START_FIRST = "get sub-list from first";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_END = "get sub-list from # from end";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_START = "get sub-list from #";
Blockly.Msg.LISTS_GET_SUBLIST_TAIL = "";
Blockly.Msg.LISTS_GET_SUBLIST_TOOLTIP = "Creates a copy of the specified portion of a list.";
Blockly.Msg.LISTS_INDEX_OF_FIRST = "find first occurrence of item";
Blockly.Msg.LISTS_INDEX_OF_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#Getting_Items_from_a_List";
Blockly.Msg.LISTS_INDEX_OF_LAST = "find last occurrence of item";
Blockly.Msg.LISTS_INDEX_OF_TOOLTIP = "Returns the index of the first/last occurrence of the item in the list.  Returns 0 if text is not found.";
Blockly.Msg.LISTS_INLIST = "in list";
Blockly.Msg.LISTS_IS_EMPTY_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#is_empty";
Blockly.Msg.LISTS_IS_EMPTY_TITLE = "%1 is empty";
Blockly.Msg.LISTS_LENGTH_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#length_of";
Blockly.Msg.LISTS_LENGTH_TITLE = "length of %1";
Blockly.Msg.LISTS_LENGTH_TOOLTIP = "Returns the length of a list.";
Blockly.Msg.LISTS_REPEAT_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#create_list_with";
Blockly.Msg.LISTS_REPEAT_TITLE = "create list with item %1 repeated %2 times";
Blockly.Msg.LISTS_REPEAT_TOOLTIP = "Creates a list consisting of the given value repeated the specified number of times.";
Blockly.Msg.LISTS_SET_INDEX_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#in_list_..._set";
Blockly.Msg.LISTS_SET_INDEX_INPUT_TO = "as";
Blockly.Msg.LISTS_SET_INDEX_INSERT = "insert at";
Blockly.Msg.LISTS_SET_INDEX_SET = "set";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = "Inserts the item at the start of a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_END = "Inserts the item at the specified position in a list.  #1 is the last item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_START = "Inserts the item at the specified position in a list.  #1 is the first item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = "Append the item to the end of a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = "Inserts the item randomly in a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = "Sets the first item in a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_END = "Sets the item at the specified position in a list.  #1 is the last item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_START = "Sets the item at the specified position in a list.  #1 is the first item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_LAST = "Sets the last item in a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = "Sets a random item in a list.";
Blockly.Msg.LISTS_TOOLTIP = "Returns true if the list is empty.";
Blockly.Msg.LOGIC_BOOLEAN_FALSE = "假";
Blockly.Msg.LOGIC_BOOLEAN_HELPURL = "https://code.google.com/p/blockly/wiki/True_False";
Blockly.Msg.LOGIC_BOOLEAN_TOOLTIP = "传回真True或假False.";
Blockly.Msg.LOGIC_BOOLEAN_TRUE = "真";
Blockly.Msg.LOGIC_COMPARE_HELPURL = "https://en.wikipedia.org/wiki/Inequality_(mathematics)";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ = "如果2个值相等, 传回True.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT = "如果第1个值大于第2个值, 传回True.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE = "如果第1个值大于等于第2个值, 传回True.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT = "如果第1个值小于第2个值, 传回True.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE = "如果第1个值小于等于第2个值, 传回True.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ = "如果第1个值不等于第2个值, 传回True.";
Blockly.Msg.LOGIC_NEGATE_HELPURL = "https://en.wikipedia.org/wiki/Negation";
Blockly.Msg.LOGIC_NEGATE_TITLE = "非 %1";
Blockly.Msg.LOGIC_NEGATE_TOOLTIP = "如果输入False传回True, 输入True传回False.";
Blockly.Msg.LOGIC_NULL = "空值NULL";
Blockly.Msg.LOGIC_NULL_HELPURL = "https://en.wikipedia.org/wiki/Nullable_type";
Blockly.Msg.LOGIC_NULL_TOOLTIP = "传回空值 null.";
Blockly.Msg.LOGIC_OPERATION_AND = "且";
Blockly.Msg.LOGIC_OPERATION_HELPURL = "https://code.google.com/p/blockly/wiki/And_Or";
Blockly.Msg.LOGIC_OPERATION_OR = "或";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND = "如果2个都是True, 传回True.";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR = "至少有1个True, 才会传回True.";
Blockly.Msg.LOGIC_TERNARY_CONDITION = "单行条件";
Blockly.Msg.LOGIC_TERNARY_HELPURL = "https://en.wikipedia.org/wiki/%3F:";
Blockly.Msg.LOGIC_TERNARY_IF_FALSE = "如为假:";
Blockly.Msg.LOGIC_TERNARY_IF_TRUE = "如为真?";
Blockly.Msg.LOGIC_TERNARY_TOOLTIP = "检查条件, 如为True传回如为真的值, 否则传回如为假的值.";
Blockly.Msg.MATH_ADDITION_SYMBOL = "+";
Blockly.Msg.MATH_ARITHMETIC_HELPURL = "https://en.wikipedia.org/wiki/Arithmetic";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_ADD = "传回2个数值的和.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE = "传回2个数值的商.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS = "传回2个数值的差.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = "传回2个数值的乘积.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_POWER = "传回第1个为底, 第2个为指数的指数值.";
Blockly.Msg.MATH_CHANGE_HELPURL = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
Blockly.Msg.MATH_CHANGE_INPUT_BY = "by";
Blockly.Msg.MATH_CHANGE_TITLE_CHANGE = "change";
Blockly.Msg.MATH_CHANGE_TOOLTIP = "Add a number to variable '%1'.";
Blockly.Msg.MATH_CONSTANT_HELPURL = "https://en.wikipedia.org/wiki/Mathematical_constant";
Blockly.Msg.MATH_CONSTANT_TOOLTIP = "Return one of the common constants: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), or ∞ (infinity).";
Blockly.Msg.MATH_CONSTRAIN_HELPURL = "https://en.wikipedia.org/wiki/Clamping_%28graphics%29";
Blockly.Msg.MATH_CONSTRAIN_TITLE = "constrain %1 low %2 high %3";
Blockly.Msg.MATH_CONSTRAIN_TOOLTIP = "Constrain a number to be between the specified limits (inclusive).";
Blockly.Msg.MATH_DIVISION_SYMBOL = "÷";
Blockly.Msg.MATH_IS_DIVISIBLE_BY = "is divisible by";
Blockly.Msg.MATH_IS_EVEN = "is even";
Blockly.Msg.MATH_IS_NEGATIVE = "is negative";
Blockly.Msg.MATH_IS_ODD = "is odd";
Blockly.Msg.MATH_IS_POSITIVE = "is positive";
Blockly.Msg.MATH_IS_PRIME = "is prime";
Blockly.Msg.MATH_IS_TOOLTIP = "Check if a number is an even, odd, prime, whole, positive, negative, or if it is divisible by certain number.  Returns true or false.";
Blockly.Msg.MATH_IS_WHOLE = "is whole";
Blockly.Msg.MATH_MODULO_HELPURL = "https://en.wikipedia.org/wiki/Modulo_operation";
Blockly.Msg.MATH_MODULO_TITLE = "余数 %1 ÷ %2";
Blockly.Msg.MATH_MODULO_TOOLTIP = "传回除予两值的余数.";
Blockly.Msg.MATH_MULTIPLICATION_SYMBOL = "×";
Blockly.Msg.MATH_NUMBER_HELPURL = "https://en.wikipedia.org/wiki/Number";
Blockly.Msg.MATH_NUMBER_TOOLTIP = "一个数值.";
Blockly.Msg.MATH_ONLIST_HELPURL = "";
Blockly.Msg.MATH_ONLIST_OPERATOR_AVERAGE = "average of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_MAX = "max of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_MEDIAN = "median of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_MIN = "min of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_MODE = "modes of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_RANDOM = "random item of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_STD_DEV = "standard deviation of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_SUM = "sum of list";
Blockly.Msg.MATH_ONLIST_TOOLTIP_AVERAGE = "Return the average (arithmetic mean) of the numeric values in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MAX = "Return the largest number in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MEDIAN = "Return the median number in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MIN = "Return the smallest number in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MODE = "Return a list of the most common item(s) in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_RANDOM = "Return a random element from the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_STD_DEV = "Return the standard deviation of the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_SUM = "Return the sum of all the numbers in the list.";
Blockly.Msg.MATH_POWER_SYMBOL = "^";
Blockly.Msg.MATH_RANDOM_FLOAT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg.MATH_RANDOM_FLOAT_TITLE_RANDOM = "random fraction";
Blockly.Msg.MATH_RANDOM_FLOAT_TOOLTIP = "Return a random fraction between 0.0 (inclusive) and 1.0 (exclusive).";
Blockly.Msg.MATH_RANDOM_INT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg.MATH_RANDOM_INT_TITLE = "random integer from %1 to %2";
Blockly.Msg.MATH_RANDOM_INT_TOOLTIP = "Return a random integer between the two specified limits, inclusive.";
Blockly.Msg.MATH_ROUND_HELPURL = "https://en.wikipedia.org/wiki/Rounding";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUND = "四舍五入";
Blockly.Msg.MATH_ROUND_OPERATOR_CEIL = "无条件进位";
Blockly.Msg.MATH_ROUND_OPERATOR_FLOOR = "无条件舍去";
Blockly.Msg.MATH_ROUND_OPERATOR_TRUNC = "剪裁";
Blockly.Msg.MATH_ROUND_TOOLTIP = "将数值向上或向下舍入小数值.";
Blockly.Msg.MATH_SINGLE_HELPURL = "https://en.wikipedia.org/wiki/Square_root";
Blockly.Msg.MATH_SINGLE_OP_ABSOLUTE = "绝对";
Blockly.Msg.MATH_SINGLE_OP_ROOT = "平方根";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ABS = "传回数值的绝对值.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_EXP = "传回数值的指数.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG = "传回数值的自然对数.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG10 = "传回数值的10为底的对数.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG2 = "传回数值的2为底的对数.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_NEG = "传回数值的负值.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_POW = "传回数值指定基底的指数.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ROOT = "传回数值的平方根.";
Blockly.Msg.MATH_SUBTRACTION_SYMBOL = "-";
Blockly.Msg.MATH_TRIG_ACOS = "acos";
Blockly.Msg.MATH_TRIG_ASIN = "asin";
Blockly.Msg.MATH_TRIG_ATAN = "atan";
Blockly.Msg.MATH_TRIG_COS = "cos";
Blockly.Msg.MATH_TRIG_HELPURL = "https://en.wikipedia.org/wiki/Trigonometric_functions";
Blockly.Msg.MATH_TRIG_SIN = "sin";
Blockly.Msg.MATH_TRIG_TAN = "tan";
Blockly.Msg.MATH_TRIG_LOG = "log";
Blockly.Msg.MATH_TRIG_LOG10 = "log10";
Blockly.Msg.MATH_TRIG_LOG2 = "log2";
Blockly.Msg.MATH_TRIG_TOOLTIP_ACOS = "传回指定角度的反余弦值(非弧度）。";
Blockly.Msg.MATH_TRIG_TOOLTIP_ASIN = "传回指定角度的反正弦值(非弧度）。";
Blockly.Msg.MATH_TRIG_TOOLTIP_ATAN = "传回指定角度的反正切值。";
Blockly.Msg.MATH_TRIG_TOOLTIP_COS = "传回指定角度的余弦值(非弧度）。";
Blockly.Msg.MATH_TRIG_TOOLTIP_SIN = "传回指定角度的正弦值(非弧度）。";
Blockly.Msg.MATH_TRIG_TOOLTIP_TAN = "传回指定角度的正切值(非弧度）。";
Blockly.Msg.ME = "我";
Blockly.Msg.NEW_VARIABLE = "新变量...";
Blockly.Msg.NEW_VARIABLE_TITLE = "新变量名称:";
Blockly.Msg.ORDINAL_NUMBER_SUFFIX = "";
Blockly.Msg.PROCEDURES_ALLOW_STATEMENTS = "允许有程序叙述";
Blockly.Msg.PROCEDURES_BEFORE_PARAMS = "参数:";
Blockly.Msg.PROCEDURES_CALLNORETURN_CALL = "调用函数";
Blockly.Msg.PROCEDURES_CALLNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_CALLNORETURN_TOOLTIP = "运行用户自订函数 '%1'.";
Blockly.Msg.PROCEDURES_CALLRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_CALLRETURN_TOOLTIP = "运行用户自订函数 '%1' 和回传值.";
Blockly.Msg.PROCEDURES_CALL_BEFORE_PARAMS = "参数:";
Blockly.Msg.PROCEDURES_CREATE_DO = "创建 '%1'";
Blockly.Msg.PROCEDURES_DEFNORETURN_DO = "";
Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE = "myFunc";
Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE = "函数名称";
Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP = "创建没有传回值的函数.";
Blockly.Msg.PROCEDURES_DEFRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_DEFRETURN_RETURN = "传回";
Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP = "创建拥有传回值的函数.";
Blockly.Msg.PROCEDURES_DEF_DUPLICATE_WARNING = "警告: 这个函数拥有重复的参数.";
Blockly.Msg.PROCEDURES_HIGHLIGHT_DEF = "高亮度函数定义";
Blockly.Msg.PROCEDURES_IFRETURN_TOOLTIP = "如果是是True, 就传回第2个值.";
Blockly.Msg.PROCEDURES_IFRETURN_WARNING = "警告: 这个积木只能使用在函数定义.";
Blockly.Msg.PROCEDURES_MUTATORARG_PRETITLE='变量';
Blockly.Msg.PROCEDURES_MUTATORARG_ARRAY_PRETITLE='数组';
Blockly.Msg.PROCEDURES_MUTATORARG_POINTER_PRETITLE='指针';
Blockly.Msg.PROCEDURES_MUTATORARG_TITLE = "参数值:";
Blockly.Msg.PROCEDURES_MUTATORARG_TOOLTIP = "添加参数至函数.";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TITLE = "参数表";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TOOLTIP = "添加, 删除 或重排函数参数.";
Blockly.Msg.REMOVE_COMMENT = "删除注解";
Blockly.Msg.RENAME_VARIABLE = "重命名变量...";
Blockly.Msg.RENAME_VARIABLE_TITLE = "重命名全部 '%1' 变量为:";
Blockly.Msg.TEXT_APPEND_APPENDTEXT = "append text";
Blockly.Msg.TEXT_APPEND_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Text_modification";
Blockly.Msg.TEXT_APPEND_TO = "to";
Blockly.Msg.TEXT_APPEND_TOOLTIP = "Append some text to variable '%1'.";
Blockly.Msg.TEXT_CHANGECASE_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Adjusting_text_case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_LOWERCASE = "to lower case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_TITLECASE = "to Title Case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_UPPERCASE = "to UPPER CASE";
Blockly.Msg.TEXT_CHANGECASE_TOOLTIP = "Return a copy of the text in a different case.";
Blockly.Msg.TEXT_CHARAT_FIRST = "get first letter";
Blockly.Msg.TEXT_CHARAT_FROM_END = "get letter # from end";
Blockly.Msg.TEXT_CHARAT_FROM_START = "get letter #";
Blockly.Msg.TEXT_CHARAT_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Extracting_text";
Blockly.Msg.TEXT_CHARAT_INPUT_INTEXT = "in text";
Blockly.Msg.TEXT_CHARAT_LAST = "get last letter";
Blockly.Msg.TEXT_CHARAT_RANDOM = "get random letter";
Blockly.Msg.TEXT_CHARAT_TAIL = "";
Blockly.Msg.TEXT_CHARAT_TOOLTIP = "Returns the letter at the specified position.";
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "Add an item to the text.";
Blockly.Msg.TEXT_CREATE_JOIN_TITLE_JOIN = "join";
Blockly.Msg.TEXT_CREATE_JOIN_TOOLTIP = "Add, remove, or reorder sections to reconfigure this text block.";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_END = "to letter # from end";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_START = "to letter #";
Blockly.Msg.TEXT_GET_SUBSTRING_END_LAST = "to last letter";
Blockly.Msg.TEXT_GET_SUBSTRING_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Extracting_a_region_of_text";
Blockly.Msg.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = "in text";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FIRST = "get substring from first letter";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_END = "get substring from letter # from end";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_START = "get substring from letter #";
Blockly.Msg.TEXT_GET_SUBSTRING_TAIL = "";
Blockly.Msg.TEXT_GET_SUBSTRING_TOOLTIP = "Returns a specified portion of the text.";
Blockly.Msg.TEXT_INDEXOF_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Finding_text";
Blockly.Msg.TEXT_INDEXOF_INPUT_INTEXT = "in text";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_FIRST = "find first occurrence of text";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_LAST = "find last occurrence of text";
Blockly.Msg.TEXT_INDEXOF_TAIL = "";
Blockly.Msg.TEXT_INDEXOF_TOOLTIP = "Returns the index of the first/last occurrence of first text in the second text.  Returns 0 if text is not found.";
Blockly.Msg.TEXT_ISEMPTY_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Checking_for_empty_text";
Blockly.Msg.TEXT_ISEMPTY_TITLE = "%1 is empty";
Blockly.Msg.TEXT_ISEMPTY_TOOLTIP = "Returns true if the provided text is empty.";
Blockly.Msg.TEXT_JOIN_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Text_creation";
Blockly.Msg.TEXT_JOIN_TITLE_CREATEWITH = "create text with";
Blockly.Msg.TEXT_JOIN_TOOLTIP = "Create a piece of text by joining together any number of items.";
Blockly.Msg.TEXT_LENGTH_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Text_modification";
Blockly.Msg.TEXT_LENGTH_TITLE = "length of %1";
Blockly.Msg.TEXT_LENGTH_TOOLTIP = "Returns the number of letters (including spaces) in the provided text.";
Blockly.Msg.TEXT_PRINT_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Printing_text";
Blockly.Msg.TEXT_PRINT_TITLE = "显示 %1";
Blockly.Msg.TEXT_PRINT_TOOLTIP = "格式化显示字符串, 数值和其他值.";
Blockly.Msg.TEXT_PROMPT_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Getting_input_from_the_user";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_NUMBER = "Prompt for user for a number.";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_TEXT = "Prompt for user for some text.";
Blockly.Msg.TEXT_PROMPT_TYPE_NUMBER = "prompt for number with message";
Blockly.Msg.TEXT_PROMPT_TYPE_TEXT = "prompt for text with message";
Blockly.Msg.TEXT_TEXT_HELPURL = "https://en.wikipedia.org/wiki/String_(computer_science)";
Blockly.Msg.TEXT_TEXT_TOOLTIP = "字符, 单字或一行文本内容.";
Blockly.Msg.TEXT_TRIM_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Trimming_%28removing%29_spaces";
Blockly.Msg.TEXT_TRIM_OPERATOR_BOTH = "trim spaces from both sides of";
Blockly.Msg.TEXT_TRIM_OPERATOR_LEFT = "trim spaces from left side of";
Blockly.Msg.TEXT_TRIM_OPERATOR_RIGHT = "trim spaces from right side of";
Blockly.Msg.TEXT_TRIM_TOOLTIP = "Return a copy of the text with spaces removed from one or both ends.";
Blockly.Msg.VARIABLES_DEFAULT_NAME = "item";
Blockly.Msg.VARIABLES_GET_CREATE_SET = "创建 '指定 %1'";
Blockly.Msg.VARIABLES_GET_HELPURL = "https://code.google.com/p/blockly/wiki/Variables#Get";
Blockly.Msg.VARIABLES_GET_TAIL = "";
Blockly.Msg.VARIABLES_GET_TITLE = "";
Blockly.Msg.VARIABLES_GET_TOOLTIP = "传回这个变量的值.";
Blockly.Msg.VARIABLES_SET_CREATE_GET = "创建 '取 %1'";
Blockly.Msg.VARIABLES_SET_HELPURL = "https://code.google.com/p/blockly/wiki/Variables#Set";
Blockly.Msg.VARIABLES_SET_TAIL = "成为";
Blockly.Msg.VARIABLES_SET_TITLE = "指定";
Blockly.Msg.VARIABLES_SET_TOOLTIP = "指定这个变量成为之后的值.";
Blockly.Msg.PROCEDURES_DEFRETURN_TITLE = Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE;
Blockly.Msg.LISTS_GET_SUBLIST_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.LISTS_SET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_DEFRETURN_PROCEDURE = Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE;
Blockly.Msg.VARIABLES_SET_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TITLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.MATH_CHANGE_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.VARIABLES_GET_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.PROCEDURES_DEFRETURN_DO = Blockly.Msg.PROCEDURES_DEFNORETURN_DO;
Blockly.Msg.LISTS_GET_INDEX_HELPURL = Blockly.Msg.LISTS_INDEX_OF_HELPURL;
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.CONTROLS_IF_MSG_THEN = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_INDEX_OF_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_CALLRETURN_CALL = Blockly.Msg.PROCEDURES_CALLNORETURN_CALL;
Blockly.Msg.LISTS_GET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.CONTROLS_FOR_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_FOREACH_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_IF_TITLE_IF = Blockly.Msg.CONTROLS_IF_MSG_IF;
Blockly.Msg.CONTROLS_WHILEUNTIL_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_ELSEIF_TITLE_ELSEIF = Blockly.Msg.CONTROLS_IF_MSG_ELSEIF;
Blockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.CONTROLS_IF_ELSE_TITLE_ELSE = Blockly.Msg.CONTROLS_IF_MSG_ELSE;
Blockly.Msg.STDIO_PRINTF_TITLE = '输出printf';
Blockly.Msg.STDIP_PRINTF_MUTATOR_PRINTFADD_TITLE = '项目';
Blockly.Msg.STDIO_SCANF_TITLE = '输入scanf';
Blockly.Msg.STDIP_SCANF_MUTATOR_SCANFADD_TITLE = '项目';
Blockly.Msg.STDIO_SCANF_TOOLTIP = '';
Blockly.Msg.STDIO_SCANF_HELPURL = 'https://en.wikipedia.org/wiki/Scanf_format_string';
Blockly.Msg.STDIO_NEWLINE_TITLE = '新行\n';
Blockly.Msg.STDIO_NEWLINE_TOOLTIP = '新行字符';
Blockly.Msg.STDIO_NEWLINE_HELPURL = 'https://en.wikipedia.org/wiki/Newline';
Blockly.Msg.COMMENT_TITLE = '注解';
Blockly.Msg.COMMENT_MUTATOR_COMMENTADD_TITLE = '项目';
Blockly.Msg.COMMENT_TOOLTIP = '"注解" 是一串行的字符使用斜线/和星号 (/*) 开始, 对于编译器来说如同是单一空白字符, 而被忽略, 注解可以组合各种字符, 包含新行字符, 不含注解结束的 (*/). 注解可以跨过很多行, 但不支持嵌套注解, 和出现在任何地方';
Blockly.Msg.STDLIB_CONVERT_TITLE = '转换字符串 %1 成为 %2';
Blockly.Msg.STDLIB_CONVERT_INT = 'int';
Blockly.Msg.STDLIB_CONVERT_DOUBLE = 'double';
Blockly.Msg.STDLIB_CONVERT_TOOLTIP = '转换字符串成为整数或浮点数型态.';
Blockly.Msg.STDLIB_CONVERT_HELPURL = 'https://en.wikipedia.org/wiki/C_string_handling';
Blockly.Msg.STDLIB_RAND_TITLE = '乱数值 %1';
Blockly.Msg.STDLIB_RAND_TOOLTIP = '指定乱数值';
Blockly.Msg.STDLIB_RAND_HELPURL = 'https://en.wikipedia.org/wiki/C_mathematical_functions#Random_number_generation';
Blockly.Msg.STDLIB_RANDSCOPE_TITLE = "乱数值范围: %1 ~ %2";
Blockly.Msg.STDLIB_RANDSCOPE_TOOLTIP = '指定混乱数值范围.';
Blockly.Msg.STDLIB_RANDSCOPE_HELPURL = 'https://en.wikipedia.org/wiki/C_mathematical_functions#Random_number_generation';
Blockly.Msg.STDLIB_SRAND_TITLE = '乱数种子 %1'; // not use
Blockly.Msg.STDLIB_MALLOC_TITLE = '配置内存 malloc %1';
Blockly.Msg.STDLIB_MALLOC_TOOLTIP = '动态内存配置';
Blockly.Msg.STDLIB_MALLOC_HELPURL = 'https://en.wikipedia.org/wiki/C_dynamic_memory_allocation';
Blockly.Msg.STDLIB_SIZEOFFORMALLOC_TITLE = '字节数 %1';
Blockly.Msg.STDLIB_SIZEOFFORMALLOC_TOOLTIP = '传回字节数';
Blockly.Msg.STDLIB_SIZEOFFORMALLOC_HELPURL = 'https://en.wikipedia.org/wiki/Sizeof';
Blockly.Msg.STDLIB_ARITHFORMALLOC_TITLE = '%1 x %2';
Blockly.Msg.STDLIB_FREE_TITLE = '释放内存 free %1';
Blockly.Msg.STDLIB_FREE_TOOLTIP = '释放配置的内存';
Blockly.Msg.STDLIB_FREE_HELPURL = 'https://en.wikipedia.org/wiki/C_dynamic_memory_allocation';
Blockly.Msg.STDLIB_EXIT_TITLE = '结束 exit %1';
Blockly.Msg.STDLIB_EXIT_SUCCESS = '成功';
Blockly.Msg.STDLIB_EXIT_FAILURE = '失败';
Blockly.Msg.STDLIB_EXIT_TOOLTIP = '结束程序.';
Blockly.Msg.STDLIB_EXIT_HELPURL = 'https://en.wikipedia.org/wiki/Exit_(system_call)';
Blockly.Msg.MATH_SIN_TITLE = 'sin %1'; // not use
Blockly.Msg.MATH_COS_TITLE = 'cos %1'; // not use
Blockly.Msg.MATH_TAN_TITLE = 'tan %1'; // not use
Blockly.Msg.MATH_POW_TITLE = '指数pow %1 ^ %2'; //'pow %1 ^ %2';
Blockly.Msg.MATH_EXP_TITLE = '对数exp %1';
Blockly.Msg.MATH_SQRT_TITLE = '平方根sqrt %1';
Blockly.Msg.MATH_ABS_TITLE = '绝对值 %1'; // not use
Blockly.Msg.MATH_NUMCHECK_TITLE = '%1 是 %2 ?';
Blockly.Msg.MATH_NUMCHECK_ISFINITE = '有限值';
Blockly.Msg.MATH_NUMCHECK_ISINF = '无限值';
Blockly.Msg.MATH_NUMCHECK_SIGNBIT = '负值';
Blockly.Msg.MATH_NUMCHECK_ISNAN = 'NaN值';
Blockly.Msg.MATH_NUMCHECK_TOOLTIP = '';
Blockly.Msg.MATH_NUMCOMPARE_TITLE = '%1 第1个值是 %3 第2个值 %2';
Blockly.Msg.MATH_NUMCOMPARE_ISGREATER = '大于';
Blockly.Msg.MATH_NUMCOMPARE_ISLESS = '小于';
Blockly.Msg.MATH_NUMCOMPARE_ISGREQ = '大于等于';
Blockly.Msg.MATH_NUMCOMPARE_ISLEEQ = '小于等于';
Blockly.Msg.MATH_NUMCOMPARE_ISLEGR = '不等于';
Blockly.Msg.MATH_NUMCOMPARE_ISUNORDER = '没有顺序的';
Blockly.Msg.MATH_NUMCOMPARE_TOOLTIP = '';
Blockly.Msg.STRING_STRLEN_TITLE = '字符串长度 %1';
Blockly.Msg.STRING_STRLEN_TOOLTIP = '传回字符串长度';
Blockly.Msg.STRING_STRLEN_HELPURL = 'https://en.wikipedia.org/wiki/C_string_handling';
Blockly.Msg.STRING_STRCAT_TITLE = '字符串连接 %1 和 %2';
Blockly.Msg.STRING_STRCAT_TOOLTIP = '连接两个字符串';
Blockly.Msg.STRING_STRCAT_HELPURL = 'https://en.wikipedia.org/wiki/C_string_handling';
Blockly.Msg.STRING_STRCPY_TITLE = '字符串复制从 %1 到 %2';
Blockly.Msg.STRING_STRCPY_TOOLTIP = '复制第1个字符串至第2个字符串';
Blockly.Msg.STRING_STRCPY_HELPURL = 'https://en.wikipedia.org/wiki/C_string_handling';
Blockly.Msg.STRING_STRCMP_TITLE = '字符串比较 %1 和 %2';
Blockly.Msg.STRING_STRCMP_TOOLTIP = '比较两个字符串';
Blockly.Msg.STRING_STRCMP_HELPURL = 'https://en.wikipedia.org/wiki/C_string_handling';

Blockly.Msg.TIME_REQUIREDTIME_TITLE = '计算经过时间';
Blockly.Msg.TIME_REQRUIEDTIME_TALE = '保存至 double 变量 %1';
Blockly.Msg.TIME_TIME_CURRENT_TITLE = '显示目前时间';

Blockly.Msg.VARIABLES_SET_DIST_VARIABLE = '变量';
Blockly.Msg.VARIABLES_SET_DIST_POINTER = '指针';
Blockly.Msg.VARIABLES_SET_DIST_ARRAY = '数组';
Blockly.Msg.VARIABLES_SET_POINTER_SPEC_ONE = '*';
Blockly.Msg.VARIABLES_SET_POINTER_SPEC_TWO = '**';
Blockly.Msg.VARIABLES_SET_ARRAY_SPEC_ONE = '[]';
Blockly.Msg.VARIABLES_SET_ARRAY_SPEC_TWO = '[][]';
Blockly.Msg.VARIABLES_SET_ARRAY_SPEC_THREE = '[][][]';
Blockly.Msg.VARIABLES_SET_TYPE_INT = 'int';
Blockly.Msg.VARIABLES_SET_TYPE_UNSIGNED_INT= 'unsigned int';
Blockly.Msg.VARIABLES_SET_TYPE_FLOAT = 'float';
Blockly.Msg.VARIABLES_SET_TYPE_DOUBLE = 'double';
Blockly.Msg.VARIABLES_SET_TYPE_CHAR= 'char';
Blockly.Msg.VARIABLES_SET_ITERATION_NORMAL = '*';
Blockly.Msg.VARIABLES_SET_ITERATION_DOUBLE = '**';
Blockly.Msg.VARIABLES_SET_ITERATION_TRIPLE = '***';
Blockly.Msg.VARIABLES_DECLARE_TITLE = '变量';
Blockly.Msg.VARIABLES_DECLARE_NAME = '名称';
Blockly.Msg.VARIABLES_DECLARE_INIT = '初始值';
Blockly.Msg.VARIABLES_DECLARE_DEFAULT_NAME = 'myVar';
Blockly.Msg.VARIABLES_POINTER_DECLARE_TITLE = '指针';
Blockly.Msg.VARIABLES_POINTER_DECLARE_ITERATION = '';
Blockly.Msg.VARIABLES_POINTER_DECLARE_DEFAULT_NAME = 'myPtr';
Blockly.Msg.VARIABLES_ARRAY_DECLARE_TITLE = '数组';
Blockly.Msg.VARIABLES_ARRAY_DECLARE_LENGTH = '元素数';
Blockly.Msg.VARIABLES_ARRAY_DECLARE_DEFAULT_NAME = 'myArr';
Blockly.Msg.VARIABLES_RETURN = '传回 ';
Blockly.Msg.POINTER_GET_TITLE = "";
Blockly.Msg.ARRAY_GET_TITLE = "";

Blockly.Msg.FUNCTION_SET_TYPE_INT = 'int';
Blockly.Msg.FUNCTION_SET_TYPE_FLOAT = 'float';
Blockly.Msg.FUNCTION_SET_TYPE_DOUBLE = 'double';
Blockly.Msg.FUNCTION_SET_TYPE_LONG = 'long';
Blockly.Msg.FUNCTION_SET_TYPE_LONGLONG = 'long long';
Blockly.Msg.FUNCTION_SET_TYPE_SHORT = 'short';
Blockly.Msg.FUNCTION_SET_TYPE_LONGDOUBLE = 'long double';
Blockly.Msg.FUNCTION_SET_TYPE_CHAR = 'char';

Blockly.Msg.DEFINE_DECLARE_TITLE = '#define';
Blockly.Msg.DEFINE_DECLARE_INIT = '是';
Blockly.Msg.DEFINE_DECLARE_DEFAULT_NAME = 'myMacro';
Blockly.Msg.DEFINE_GET_TITLE = '';
Blockly.Msg.DEFINE_SET_TYPE_CONSTANT = '常数';
Blockly.Msg.DEFINE_SET_TYPE_MACRO = '宏';

Blockly.Msg.MAIN_BLOCK = 'main() 函数: 主程序';
Blockly.Msg.MAIN_BLOCK_RETURN = "int 型态的传回值:";

Blockly.Msg.CONTROLS_SWITCH = '多选一条件switch ';
Blockly.Msg.CONTROLS_SWITCH_CASE = '测试case:';

Blockly.Msg.STRUCTURE_DEFINE_TITLE = '结构型态名称';
Blockly.Msg.STRUCTURE_DEFINE_NAME = 'myStructure';
Blockly.Msg.STRUCTURE_MUTATORCONTAINER_TITLE = '成员';
Blockly.Msg.STRUCTURE_MUTATORMEM_VAR= '变量型态';
Blockly.Msg.STRUCTURE_MUTATORMEM_POINTER= '指针型态';
Blockly.Msg.STRUCTURE_MUTATORMEM_ARRAY= '字符串型态';
Blockly.Msg.STRUCTURE_MUTATORARG_NAME = '名称';

Blockly.Msg.STRUCTURE_DECLARE_TITLE = '型态';
Blockly.Msg.STRUCTURE_DECLARE_TALE = '名称';
Blockly.Msg.STRUCTURE_DECLARE_NAME = 'myStructure1';

Blockly.Msg.STRUCTURE_SET_NAME = '名称';
Blockly.Msg.STRUCTURE_SET_MEMBER = '成员';

Blockly.Msg.STRUCTURE_GET_NAME = '名称';
Blockly.Msg.STRUCTURE_GET_MEMBER = '成员';

Blockly.Msg.UNION_DEFINE_NAME = 'myUnion';

Blockly.Msg.PROCEDURES_RETURN_TITLE = '结束函数 回传';
Blockly.Msg.PROCEDURES_RETURN_TOOLTIP = '传回值后, 结束函数运行, 没有回传值就是结束函数, 可以使用在函数程序区块的任何地方';
Blockly.Msg.PLZ_OUT_OF_BLOCK = '警告: 这个积木不能置于其他程序区块之外, 除了函数区块.';
Blockly.Msg.PLZ_INSIDE_FUNCTION = '警告: 将这个积木置于函数之中.';
Blockly.Msg.PLZ_OUT_OF_FUNCTION = '警告: 将这个积木置于函数之外.';

Blockly.Msg.SELECT_MENU = '-Item-';
Blockly.Msg.SELECT_TYPE = '-Type-';

Blockly.Msg.TAG_DEFINE_DECLARE = ['macro', 'constant'];
Blockly.Msg.TAG_DEFINE_GET = ['macro', 'constant', 'get'];
Blockly.Msg.TAG_VARIABLE_DECLARE = ['variables', 'declare', 'define', 'declaration', 'definition'];
Blockly.Msg.TAG_VARIABLE_SET = ['variables', 'assignment', 'set'];
Blockly.Msg.TAG_VARIABLE_GET = ['variables', 'get'];
Blockly.Msg.TAG_VARIABLE_POINTER_DECLARE = ['pointer', 'declare', 'define', 'declaration', 'definition'];
Blockly.Msg.TAG_VARIABLE_POINTER_SET = ['pointer', 'assignment', 'set'];
Blockly.Msg.TAG_VARIABLE_POINTER_GET = ['pointer', 'get'];
Blockly.Msg.TAG_VARIABLE_POINTER_ADDR = ['&', 'address'];
Blockly.Msg.TAG_VARIABLE_POINTER_ASTR = ['*', 'asterisk'];
Blockly.Msg.TAG_VARIABLE_ARRAY_DECLARE = ['array', 'declare', 'define', 'declaration', 'definition'];
Blockly.Msg.TAG_VARIABLE_ARRAY_SET = ['array', 'assignment', 'set'];
Blockly.Msg.TAG_VARIABLE_ARRAY_GET = ['array', 'get'];

Blockly.Msg.TAG_STRUCTURE_DEFINE = ['structure', 'typedef', 'declare', 'define', 'declaration', 'definition'];
Blockly.Msg.TAG_STRUCTURE_DECLARE = ['structure', 'declare', 'define', 'declaration', 'definition'];
Blockly.Msg.TAG_STRUCTURE_GET = ['structure', 'get'];
Blockly.Msg.TAG_STRUCTURE_SET = ['structure', 'assignment', 'set'];

Blockly.Msg.TAG_LOGIC_IF = ['if', 'if else', 'ifelse'];
Blockly.Msg.TAG_LOGIC_COMPARE = ['compare'];
Blockly.Msg.TAG_LOGIC_OPERATION = ['operation', 'and', 'or'];
Blockly.Msg.TAG_LOGIC_NEGATE = ['!', 'negate'];
Blockly.Msg.TAG_LOGIC_BOOLEAN = ['boolean', 'true', 'false'];
Blockly.Msg.TAG_LOGIC_NULL = ['null', 'null character'];
Blockly.Msg.TAG_LOGIC_TERNARY = ['?'];
Blockly.Msg.TAG_LOGIC_SWITCH = ['switch', 'case'];

Blockly.Msg.TAG_LOOP_WHILE = ['while', 'loop'];
Blockly.Msg.TAG_LOOP_FOR = ['for', 'loop'];
Blockly.Msg.TAG_LOOP_FLOW = ['break', 'continue'];

Blockly.Msg.TAG_PROCEDURE_DEFNORETURN = ['void', 'function'];
Blockly.Msg.TAG_PROCEDURE_DEFRETURN = ['function'];

Blockly.Msg.TAG_MATH_NUMBER = ['number'];
Blockly.Msg.TAG_MATH_ARITHMETIC = ['number', 'arithmetic', 'additionsubtractionmultiplicationdivision', '+-*/'];
Blockly.Msg.TAG_MATH_MODULO = ['arithmetic', 'remainder', '%'];

Blockly.Msg.TAG_STDIO_PRINTF = ['stdio.h', 'printf()', 'output', 'out'];
Blockly.Msg.TAG_STDIO_TEXT = ['stdio.h', 'text'];
Blockly.Msg.TAG_STDIO_NEWLINE = ['stdio.h', 'newline', 'new line', '\n', 'change line', 'line change'];
Blockly.Msg.TAG_STDIO_SCANF = ['stdio.h', 'scanf()', 'input'];

Blockly.Msg.TAG_COMMENT = ['comment', 'Comment', '\/\/', '\/**\/'];

Blockly.Msg.TAG_STDLIB_CONVERT = ['stdlib.h', 'convert', 'atoi()', 'atof()'];
Blockly.Msg.TAG_STDLIB_RAND = ['stdlib.h', 'random number'];
Blockly.Msg.TAG_STDLIB_MALLOC = ['stdlib.h', 'malloc()', 'memory allocation', 'memory allocate'];
Blockly.Msg.TAG_STDLIB_SIZEOF = ['stdlib.h', 'sizeof()', 'size of', 'sizeOf'];
Blockly.Msg.TAG_STDLIB_FREE = ['stdlib.h', 'free()'];
Blockly.Msg.TAG_STDLIB_EXIT = ['stdlib.h', 'exit(0)', 'exit(1)', 'end', 'the end'];

Blockly.Msg.TAG_STRING_STRLEN = ['string.h', 'strlen()', 'string length', 'length of string'];
Blockly.Msg.TAG_STRING_STRCAT = ['string.h', 'strcat()', 'string concatenate', 'concatenate string'];
Blockly.Msg.TAG_STRING_STRCPY = ['string.h', 'strcpy()', 'string copy', 'copy string'];
Blockly.Msg.TAG_STRING_STRCMP = ['string.h', 'strcmp()', 'string compare', 'compare string'];

Blockly.Msg.TAG_MATH_ABS = ['math.h', 'absolute value'];
Blockly.Msg.TAG_MATH_TRIG = ['math.h', 'trigonometric function', 'sin()', 'cos()', 'tan()', 'sine function', 'cosine function', 'tangent function'];
Blockly.Msg.TAG_MATH_LOGS = ['math.h', 'log()', 'loge()', 'log10()', 'log2()', 'log e'];
Blockly.Msg.TAG_MATH_POW = ['math.h', 'power', 'pow()'];
Blockly.Msg.TAG_MATH_EXP = ['math.h', 'exponential function', 'exp()'];
Blockly.Msg.TAG_MATH_SQRT = ['math.h', 'sqrt()', 'square root'];
Blockly.Msg.TAG_MATH_ROUND = ['math.h', 'round up', 'round down', 'round()', 'trunc()', 'ceil()', 'floor()', 'truncate'];
Blockly.Msg.TAG_MATH_NUMCHECK = ['math.h', 'two number check'];
Blockly.Msg.TAG_MATH_NUMCOMPARE = ['math.h', 'two number compare'];

Blockly.Msg.TAG_TIME_CURRENT = ['time.h', 'get current time', 'print current time'];
Blockly.Msg.TAG_TIME_REQUIREDTIME = ['time.h', 'the time to do followings'];

Blockly.Msg.PROCEDURES_ILLEGALNAME = '不合法的函数名称';
Blockly.Msg.VARIABLES_ILLEGALNAME = '不合法的变量名称';
Blockly.Msg.STRUCTURE_ILLEGALNAME = '不合法的结构名称';

Blockly.Msg.CONTROLS_SWITCH_BREAK_WARNING = "警告 : 这个积木需要在多选一条件switch的程序区块.";
Blockly.Msg.CONTROLS_SWITCH_BREAK = '跳出switch';
Blockly.Msg.CONTROLS_SWITCH_BREAK_TOOLTIP = '跳出和结束switch多选一条件的程序区块.';
Blockly.Msg.CONTROLS_SWITCH_DEFAULT = '没有符合测试条件default:';
Blockly.Msg.CONTROLS_SWITCH_DO = "运行";
Blockly.Msg.CONTROLS_SWITCH_TOOLTIP1 = "如果都没有对应值, 运行第1个程序区块, 如果值符合第2个值, 运行第2个程序区块.";
Blockly.Msg.CONTROLS_SWITCH_TOOLTIP2 = "果都没有对应值, 运行第1个程序区块, 如果值符合第2个值, 运行第2个程序区块, 如果符合第3个值, 运行第3个程序区块.";
Blockly.Msg.CONTROLS_SWITCH_TOOLTIP3 = "果都没有对应值, 运行第1个程序区块, 如果值符合第2个值, 运行第2个程序区块, .... , 如果符合最后1个值, 运行最后1个程序区块.";
Blockly.Msg.CONTROLS_SWITCH_TOOLTIP4 = "果都没有对应值, 运行第1个程序区块, 如果值符合第2个值, 运行第2个程序区块, .... , 如果符合最后1个值, 运行最后1个程序区块.";
Blockly.Msg.CONTROLS_SWITCH_CASE_TOOLTIP = "添加测试case的条件."

Blockly.Msg.MAINPROCEDURES_TOOLTIP = "基本程序结构的main()函数, 传回int整数值";

Blockly.Msg.STRUCTURE_DEFINE_TOOPTIP = "定义结构, 可以添加, 删除, 重命名结构的成员. 我们需要在使用结构前先定义.";
Blockly.Msg.STRUCTURE_DECLARE_TOOPTIP = "使用定义的结构声明变量(类似变量声明). 我们需要在使用结构前先定义.";
Blockly.Msg.STRUCTURE_GET_TOOLTIP = "传回结构本身或成员值.";
Blockly.Msg.STRUCTURE_SET_TOOLTIP = "指定结构本身或结构的成员值.";
Blockly.Msg.STRUCTURE_MUTATORCONTAINER_TOOLTIP = "添加, 删除, 或重新安排成员.";
Blockly.Msg.STRUCTURE_MUTATORARG_TOOLTIP = "添加成员至结构."

Blockly.Msg.TIME_CURRENT_TOOLTIP = "显示目前时间 从 \"0000(年)-00(月)-00(日)-00(时)-00(分)-00(秒)\"";
Blockly.Msg.TIME_REQUIREDTIME_TOOLTIP = "保存经过的时间至之后的浮点数double变量";

Blockly.Msg.VARIABLES_DECLARE_TOOLTIP = "声明变量";

Blockly.Msg.TAG_MATH_CONVERT_TYPE = ['(type)'];
Blockly.Msg.MATH_CONVERT_TYPE_TOOLTIP = "型态转换运算符, 转换成指定型态";

Blockly.Msg.TAG_STDIO_TAB = ['stdio.h', 'tab', '\t'];
Blockly.Msg.STDIO_TAB_TITLE="Tab";
Blockly.Msg.STDIO_TAB_TOOLTIP="TAB键";
Blockly.Msg.VARIABLES_ARRAY_POINTER_TOOLTIP="数组名称指针";

Blockly.Msg.MATH_INCREMENT_OP="++";
Blockly.Msg.MATH_DECREMENT_OP="--";
Blockly.Msg.TAG_MATH_PREV_INC_DECREMENT= ['number', 'previous increment/decrement', '++', '--'];
Blockly.Msg.MATH_PREV_INC_DECREMENT_TOOLTIP="前置递增/递减运算符";
Blockly.Msg.TAG_MATH_POST_INC_DECREMENT= ['number', 'post increment/decrement', '++', '--'];
Blockly.Msg.MATH_POST_INC_DECREMENT_TOOLTIP="后置递增/递减运算符";
Blockly.Msg.MATH_INCREMENT_EXPRESSION_TITLE="%1 ++";
Blockly.Msg.MATH_INCREMENT_EXPRESSION_TOOLTIP="递增表达式";
Blockly.Msg.TAG_MATH_INCREMENT_EXPRESSION=['number', 'increment expression', '++'];
Blockly.Msg.MATH_DECREMENT_EXPRESSION_TITLE="%1 --";
Blockly.Msg.MATH_DECREMENT_EXPRESSION_TOOLTIP="递减表达式";
Blockly.Msg.TAG_MATH_DECREMENT_EXPRESSION=['number', 'decrement expression', '++'];

Blockly.Msg.TAG_MATH_AUTO_CONVERT_TYPE= ['auto type conversions'];
Blockly.Msg.MATH_AUTO_CONVERT_TYPE_TOOLTIP="指定叙述与算术型态转换";

Blockly.Msg.TAG_VARIABLES_STRING_NULL = ['null', 'null-terminated'];
Blockly.Msg.VARIABLES_STRING_NULL = "\'\\0\'";
Blockly.Msg.VARIABLES_STRING_NULL_HELPURL = "https://en.wikipedia.org/wiki/Nullable_type";
Blockly.Msg.VARIABLES_STRING_NULL_TOOLTIP = "传回字符串结束字符.";
Blockly.Msg.VARIABLES_STRING_DECLARE_DEFAULT_NAME="myStr";
Blockly.Msg.VARIABLES_STRING_DECLARE_TITLE="字符串";
Blockly.Msg.VARIABLES_STRING_DECLARE_LENGTH='字符数';
Blockly.Msg.VARIABLES_STRING_DECLARE_VALUE="初始值";

Blockly.Msg.VARIABLES_ARRAY_DECLARE_VALUE="初始值";
Blockly.Msg.VARIABLES_ARRAY_INITIAL="从清单初始";
Blockly.Msg.VARIABLES_ARRAY_INITIAL_WARNING="声明的一维数组尺寸[小于]清单元素的个数!";
Blockly.Msg.VARIABLES_ARRAY_INITIAL_TOOLTIP="使用大括号清单来初始数组";
Blockly.Msg.ARRAY_CREATE_WITH_CONTAINER_TITLE_ADD="清单";
Blockly.Msg.ARRAY_CREATE_WITH_CONTAINER_TOOLTIP="添加, 删除, 或重排数组初始清单";
Blockly.Msg.ARRAY_CREATE_WITH_ITEM_TITLE="元素值";
Blockly.Msg.ARRAY_CREATE_WITH_ITEM_TOOLTIP="数组元素值";

Blockly.Msg.TEXT_CHAR='http://arduino.cc/en/Reference/char';
Blockly.Msg.TEXT_CHAR_TOOLTIP='字符常数值, 只能是单一字符.';
Blockly.Msg.TEXT_CHAR_WARNING="只能指定单一字符值, 或逸出字符!";